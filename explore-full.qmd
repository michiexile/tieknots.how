---
title: Explore - The full tieknots language
include-before-body:
  text: |
    <script src="jquery-2.0.3.min.js"></script>
    <script>
        "use strict";

        var picks = {
            T: {type: 'SYMBOL', label: 'T', pre: 'T'},
            W: {type: 'SYMBOL', label: 'W', pre: 'W'},
            U: {type: 'SYMBOL', label: 'U', post: 'U'},
            D: {type: 'SYMBOL', label: "'", pre: "'"},
            TT: {type: 'AND', label: 'TT', content: ['T','T']},
            TW: {type: 'AND', label: 'TW', content: ['T','W']},
            WT: {type: 'AND', label: 'WT', content: ['W','T']},
            WW: {type: 'AND', label: 'WW', content: ['W','W']},
            E: {type: 'SYMBOL', label: ''},
            done: {type: 'SYMBOL', label: 'done'},
            tie: {
                label: '[tie]',
                type: 'AND',
                content: ['prefix', 'pair_or_tuck_star', 'tuck']
            },
            prefix: {
                label: '[prefix]',
                type: 'OR',
                content: ['T', 'W', 'E']
            },
            pair_or_tuck_star: {
                label: '[(pair|tuck)*]',
                type: 'OR',
                content: ['pair_star', 'tuck_star', 'done']
            },
            pair_star: {
                label: '[pair]',
                type: 'AND',
                content: ['pair', 'pair_or_tuck_star']
            },
            pair: {
                label: '[pair]',
                type: 'OR',
                content: ['TT', 'TW', 'WT', 'WW']
            },
            tuck_star: {
                label: '[tuck]',
                type: 'AND',
                content: ['tuck', 'pair_or_tuck_star']
            },
            tuck: {
                label: '[tuck]',
                type: 'OR',
                content: ['ttuck2','wtuck2']
            },
            ttuck2: {
                label: '[ttuck2]',
                type: 'OR',
                content: ['w0','w1'],
                pre: ['TT', 'TW'],
                post: ['U','U']
            },
            wtuck2: {
                label: '[wtuck2]',
                type: 'OR',
                content: ['w0','w2'],
                pre: ['WW', 'WT'],
                post: ['U','U']
            },
            w0: {
                label: '[w0]',
                type: 'OR',
                content: ['w1','w0','w0','w2','ttuck2w2','ttuck2w1','E'],
                pre: ['WW','WT','TW','TT','','',''],
                post: ['U','U','U','U','U','U','']
            },
            w1: {
                label: '[w1]',
                type: 'OR',
                content: ['w1','w0','w0','w2','ttuck2w2','ttuck2w1','E'],
                pre: ['WW','WT','TW','TT','','',''],
                post: ['U','U','U','U','U','U','']
            },
            w2: {
                label: '[w2]',
                type: 'OR',
                content: ['w1','w0','w0','w2','ttuck2w2','ttuck2w1','E'],
                pre: ['WW','WT','TW','TT','','',''],
                post: ['U','U','U','U','U','U','']
            },
            ttuck2w0: {
                label: "[ttuck2]'[w0]",
                type: 'AND',
                content: ['ttuck2', 'D', 'w0']
            },
            ttuck2w1: {
                label: "[ttuck2]'[w1]",
                type: 'AND',
                content: ['ttuck2', 'D', 'w1']
            },
            ttuck2w2: {
                label: "[ttuck2]'[w2]",
                type: 'AND',
                content: ['ttuck2', 'D', 'w2']
            },
            wtuck2w0: {
                label: "[wtuck2]'[w0]",
                type: 'AND',
                content: ['wtuck2', 'D', 'w0']
            },
            wtuck2w1: {
                label: "[wtuck2]'[w1]",
                type: 'AND',
                content: ['wtuck2', 'D', 'w1']
            },
            wtuck2w2: {
                label: "[wtuck2]'[w2]",
                type: 'AND',
                content: ['wtuck2', 'D', 'w2']
            },
        };

        // jelem is a jQuery pointer to the element placeholder to insert at
        // choice is a key into picks for the thing that needs to be inserted
        function insert(jelem, choice) {
            switch(picks[choice].type) {
            case 'AND':
                if(picks[choice].hasOwnProperty('pre')) {
                    jelem.before(picks[choice].pre);
                }
                if(picks[choice].hasOwnProperty('post')) {
                    jelem.after(picks[choice].post);
                }
                picks[choice].content.forEach(function(factor, index) {
                    insert(jelem, factor);
                });
                break;
            case 'OR':
                var sel = document.createElement('select');
                sel.setAttribute('onchange', 'change(this)');
                var opt = document.createElement('option');
                opt.appendChild(document.createTextNode(picks[choice].label));
                sel.appendChild(opt);
                picks[choice].content.forEach(function(summand, index) {
                    opt = document.createElement('option');
                    opt.setAttribute('nextfunction', summand);
                    var label = picks[summand].label;
                    if(picks[choice].hasOwnProperty('pre')) {
                        opt.setAttribute('pre',picks[choice].pre[index]);
                        label = picks[choice].pre[index] + label;
                    }
                    if(picks[choice].hasOwnProperty('post')) {
                        opt.setAttribute('post',picks[choice].post[index]);
                        label = label + picks[choice].post[index];
                    }
                    opt.appendChild(document.createTextNode(label));
                    sel.appendChild(opt);
                });
                jelem.before(sel);
                break;
                case 'SYMBOL':
                if(picks[choice].hasOwnProperty('pre')) {
                    jelem.before(picks[choice].pre);
                }
                if(picks[choice].hasOwnProperty('post')) {
                    jelem.before(picks[choice].post);
                }
                break;
            }
        }

        function TWtoLRC(twstring) {
            var lrc_sites = {'T':{'R':'C', 'C':'L', 'L':'R'}, 'W':{'L': 'C', 'C': 'R', 'R': 'L'}};
            var ret = 'L';
            var site = 'L';
            for(var i=0; i<twstring.length; i++) {
                if(twstring[i] == 'U') {
                    ret += twstring[i];
                } else {
                    site = lrc_sites[twstring[i]][site];
                    ret += site;
                }
            }
            return ret;
        }

        function nextChoice(jelem, choice) {
            insert(jelem, choice);
            jelem.remove();
            if($('select').length == 0) {
                var knottext = $('#knot').text();
                var lrctext = TWtoLRC(knottext);
                $('#lrc').html('<a href="ties.html?TW=' + knottext + '">' + lrctext + '</a>')
            }
        }

        function change(elem) {
            elem.setAttribute('id', 'jQueryTarget');
            var jelem = $('#jQueryTarget');

            var opt = elem.selectedOptions[0];
            if(opt.hasAttribute('pre')) {
                jelem.before(opt.getAttribute('pre'));
            }

            if(opt.hasAttribute('post')) {
                jelem.after(opt.getAttribute('post'));
            }

            nextChoice(jelem, opt.getAttribute('nextfunction'));
        }


        function reset() {
            $('#lrc').empty();
            $('#knot').empty();
            $('#knot').html('<select id="start"><option selected="true" nextfunction="tie"/></select>');
            nextChoice($('#start'), 'tie');
        }
        $(reset)
    </script>
---

# Explore the Full tie-tying grammar

The grammar that encodes the 266,682 singly-tucked tie-knots enumerated by Hirsch, Markstr√∂m, Patterson, Sandberg and Vejdemo-Johansson is:


    [tie]    ::= [prefix] ([pair | tuck])* [tuck]
    [prefix] ::= T | W | &epsilon;
    [pair]   ::= TT | TW | WT | WW
    [tuck]   ::= [ttuck2] | [wtuck2]
    [ttuck2] ::= TT[w0]U | TW[w1]U
    [wtuck2] ::= WW[w0]U | WT[w2]U
    [w0]     ::= WW[w1]U | WT[w0]U | TW[w0]U | TT[w2]U |
                 [ttuck2]'[w2]U    | [wtuck2]'[w1]U    | &epsilon;
    [w1]     ::= WW[w2]U | WT[w1]U | TW[w1]U | TT[w0]U |
                 [ttuck2]'[w0]U    | [wtuck2]'[w2]U
    [w2]     ::= WW[w0]U | WT[w2]U | TW[w2]U | TT[w1]U |
                 [ttuck2]'[w1]U    | [wtuck2]'[w0]U


To start: choose by clicking the pale blue grammar symbol below to build a tieknot. The knot sequence will emerge to the left of the clickable symbol.


```{=html}
<div id="knot">
</div>

<div id="lrc">
</div>

<div style="float: right">
    <button onclick="reset()">Restart</button>
</div>
```